name: Build and Deploy to EKS

on:
  push:
    branches: [ master ]

env:
  ECR_REPOSITORY: django-microservice
  EKS_CLUSTER_NAME: django-microservice-cluster

jobs:
  deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      
      - name: Verify AWS credentials
        run: |
          echo "Verifying AWS credentials..."
          aws sts get-caller-identity
          
          echo "Checking ECR access..."
          aws ecr describe-repositories --repository-names ${{ env.ECR_REPOSITORY }} || aws ecr create-repository --repository-name ${{ env.ECR_REPOSITORY }}
          
          echo "Checking EKS access..."
          aws eks describe-cluster --name ${{ env.EKS_CLUSTER_NAME }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build Docker image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build the production image
          echo "Building Docker image..."
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
      
      - name: Push Docker image to Amazon ECR
        id: push-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Push the Docker image to ECR
          echo "Pushing image to ECR..."
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Install kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --name ${{ env.EKS_CLUSTER_NAME }} --region ${{ secrets.AWS_REGION }}
          kubectl get nodes -o wide
      
      - name: Check if PostgreSQL is running
        run: |
          echo "Checking if PostgreSQL is running..."
          kubectl get pods -l app=postgres
          kubectl get services db
          echo "PostgreSQL service details:"
          kubectl describe services db

      - name: Get current deployments
        run: |
          echo "Current deployments:"
          kubectl get deployments
          
          echo "Current services:"
          kubectl get services
      
      - name: Deploy to Kubernetes
        run: |
          # First check if web or django-service deployment exists
          if kubectl get deployment web &>/dev/null; then
            DEPLOYMENT_NAME=web
          elif kubectl get deployment django-service &>/dev/null; then
            DEPLOYMENT_NAME=django-service
          else
            echo "Neither web nor django-service deployment found, creating web deployment..."
            DEPLOYMENT_NAME=web
            # Create deployment if it doesn't exist
            kubectl create deployment web --image=${{ steps.push-image.outputs.image }}
          fi
          
          echo "Updating $DEPLOYMENT_NAME deployment with the new image..."
          kubectl set image deployment/$DEPLOYMENT_NAME $DEPLOYMENT_NAME=${{ steps.push-image.outputs.image }}
          
          # Update worker deployment with the new image
          echo "Updating worker deployment..."
          kubectl set image deployment/worker worker=${{ steps.push-image.outputs.image }}
          
          # Wait for rollout to complete
          echo "Waiting for $DEPLOYMENT_NAME deployment rollout to complete..."
          kubectl rollout status deployment/$DEPLOYMENT_NAME --timeout=180s
          
          echo "Waiting for worker deployment rollout to complete..."
          kubectl rollout status deployment/worker --timeout=180s

      - name: Apply database migrations
        run: |
          # Get database credentials from the db service
          DB_HOST=$(kubectl get service db -o jsonpath='{.spec.clusterIP}')
          
          # Create a temporary pod to run migrations
          echo "Creating migration job..."
          cat <<EOF | kubectl apply -f -
          apiVersion: batch/v1
          kind: Job
          metadata:
            name: django-migrate-${{ github.sha }}
            labels:
              app: django-migrate
          spec:
            ttlSecondsAfterFinished: 600
            template:
              spec:
                initContainers:
                - name: check-db-ready
                  image: postgres:15-alpine
                  command: ['sh', '-c', 
                    'until pg_isready -h $DB_HOST -p 5432; do echo waiting for database; sleep 2; done;']
                containers:
                - name: django
                  image: ${{ steps.push-image.outputs.image }}
                  command: ["python", "manage.py", "migrate", "--noinput"]
                  env:
                  - name: DB_NAME
                    value: "django_db"
                  - name: DB_USER
                    value: "postgres"
                  - name: DB_PASSWORD
                    value: "postgres"
                  - name: DB_HOST
                    value: "$DB_HOST"
                  - name: DB_PORT
                    value: "5432"
                  - name: SECRET_KEY
                    value: "${{ secrets.SECRET_KEY }}"
                  - name: DEBUG
                    value: "false"
                  - name: CELERY_BROKER_URL
                    value: "redis://redis-service:6379/0"
                  - name: CELERY_RESULT_BACKEND
                    value: "redis://redis-service:6379/0"
                restartPolicy: Never
          EOF
          
          # Wait for migration job to complete
          echo "Waiting for migrations to complete..."
          kubectl wait --for=condition=complete job/django-migrate-${{ github.sha }} --timeout=180s || true
          
          # Get logs from the job
          echo "Migration logs:"
          kubectl logs job/django-migrate-${{ github.sha }}

      - name: Update environment variables in deployments
        run: |
          # Get service name for web deployment
          if kubectl get deployment web &>/dev/null; then
            DEPLOYMENT_NAME=web
          elif kubectl get deployment django-service &>/dev/null; then
            DEPLOYMENT_NAME=django-service
          fi
          
          # Get database credentials from the db service
          DB_HOST=$(kubectl get service db -o jsonpath='{.spec.clusterIP}')
          
          # Update web deployment with environment variables
          kubectl set env deployment/$DEPLOYMENT_NAME \
            DB_NAME="django_db" \
            DB_USER="postgres" \
            DB_PASSWORD="postgres" \
            DB_HOST="$DB_HOST" \
            DB_PORT="5432" \
            SECRET_KEY="${{ secrets.SECRET_KEY }}" \
            CELERY_BROKER_URL="redis://redis-service:6379/0" \
            CELERY_RESULT_BACKEND="redis://redis-service:6379/0" \
            DEBUG="false"
            
          # Update worker deployment with environment variables
          kubectl set env deployment/worker \
            DB_NAME="django_db" \
            DB_USER="postgres" \
            DB_PASSWORD="postgres" \
            DB_HOST="$DB_HOST" \
            DB_PORT="5432" \
            SECRET_KEY="${{ secrets.SECRET_KEY }}" \
            CELERY_BROKER_URL="redis://redis-service:6379/0" \
            CELERY_RESULT_BACKEND="redis://redis-service:6379/0" \
            DEBUG="false"

      - name: Verify deployment
        run: |
          echo "Checking pod status:"
          kubectl get pods -o wide
          
          echo "Checking services:"
          kubectl get services
          
          # Check if web service exists, if not check django-service
          if kubectl get service web &>/dev/null; then
            echo "Web service endpoint:"
            kubectl get service web -o jsonpath='{.status.loadBalancer.ingress[0].hostname}'
          elif kubectl get service django-service &>/dev/null; then
            echo "Django service endpoint:"
            kubectl get service django-service -o jsonpath='{.status.loadBalancer.ingress[0].hostname}'
          else
            echo "No web or django-service service found"
          fi

