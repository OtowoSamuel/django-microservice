---
# Postgres Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
        - name: postgres
          image: postgres:13-alpine
          ports:
            - containerPort: 5432
          env:
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: app-secrets
                  key: DB_PASSWORD
                  optional: false
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: app-secrets
                  key: DB_USER
                  optional: false
            - name: POSTGRES_DB
              valueFrom:
                secretKeyRef:
                  name: app-secrets
                  key: DB_NAME
                  optional: false
            - name: PGDATA
              value: "/var/lib/postgresql/data/pgdata2"  # Changed to a new directory
          envFrom:
            - secretRef:
                name: app-secrets
          volumeMounts:
            - mountPath: /var/lib/postgresql/data
              name: postgres-data
      volumes:
        - name: postgres-data
          persistentVolumeClaim:
            claimName: postgres-pvc
---
# Postgres Service
apiVersion: v1
kind: Service
metadata:
  name: db
  namespace: default
spec:
  selector:
    app: postgres
  ports:
    - protocol: TCP
      port: 5432
      targetPort: 5432
  type: ClusterIP
---
# Redis Service
apiVersion: v1
kind: Service
metadata:
  name: redis-service
  namespace: default
spec:
  selector:
    app: redis
  ports:
    - protocol: TCP
      port: 6379
      targetPort: 6379
  type: ClusterIP
---
# Redis Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
        - name: redis
          image: redis:7-alpine
          ports:
            - containerPort: 6379
              name: redis
---
# Web Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: web
  namespace: default
spec:
  replicas: 3
  selector:
    matchLabels:
      app: django-app
      component: web
  template:
    metadata:
      labels:
        app: django-app
        component: web
    spec:
      initContainers:
        - name: wait-for-postgres
          image: postgres:13-alpine
          command: ['sh', '-c', "until pg_isready -h db -p 5432; do echo \"Waiting for postgres\"; sleep 2; done;"]
        - name: wait-for-redis
          image: redis:6-alpine
          command: ['sh', '-c', "until redis-cli -h redis-service ping; do echo \"Waiting for Redis\"; sleep 2; done;"]
      containers:
        - name: web
          image: 343218225856.dkr.ecr.us-east-1.amazonaws.com/django-microservice:latest
          imagePullPolicy: Always
          ports:
            - containerPort: 8000
          envFrom:
            - secretRef:
                name: app-secrets
            - configMapRef:
                name: app-config
          resources:
            limits:
              cpu: "500m"
              memory: "512Mi"
            requests:
              cpu: "100m"
              memory: "256Mi"
          livenessProbe:
            httpGet:
              path: /health/
              port: 8000
            initialDelaySeconds: 30
            timeoutSeconds: 1
            periodSeconds: 30
            successThreshold: 1
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /health/
              port: 8000
            initialDelaySeconds: 15
            timeoutSeconds: 1
            periodSeconds: 20
            successThreshold: 1
            failureThreshold: 3
---
# Worker Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: worker
  namespace: default
spec:
  replicas: 2
  selector:
    matchLabels:
      app: django-app
      component: worker
  template:
    metadata:
      labels:
        app: django-app
        component: worker
    spec:
      initContainers:
        - name: wait-for-postgres
          image: postgres:13-alpine
          command: ['sh', '-c', "until pg_isready -h db -p 5432; do echo \"Waiting for postgres\"; sleep 2; done;"]
        - name: wait-for-redis
          image: redis:6-alpine
          command: ['sh', '-c', "until redis-cli -h redis-service ping; do echo \"Waiting for Redis\"; sleep 2; done;"]
      containers:
        - name: worker
          image: 343218225856.dkr.ecr.us-east-1.amazonaws.com/django-microservice:latest
          envFrom:
            - secretRef:
                name: app-secrets
            - configMapRef:
                name: app-config
          command: ["celery", "-A", "core", "worker", "--loglevel=info"]
---
# Django Migrate Job
apiVersion: batch/v1
kind: Job
metadata:
  name: django-migrate
  namespace: default
spec:
  template:
    spec:
      initContainers:
        - name: check-db-ready
          image: postgres:13-alpine
          command: ['sh', '-c', 
            'until pg_isready -h db -p 5432; do echo "Waiting for postgres"; sleep 2; done;']
      containers:
        - name: django
          image: ${ECR_REPO_URL}:latest
          command: ["python", "manage.py", "migrate"]
          envFrom:
            - secretRef:
                name: app-secrets
            - configMapRef:
                name: app-config
      restartPolicy: OnFailure
---
# ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: app-config
  namespace: default
data:
  DEBUG: "False"
  ALLOWED_HOSTS: "*"
  CELERY_BROKER_URL: "redis://redis-service:6379/0"
  CELERY_RESULT_BACKEND: "redis://redis-service:6379/0"
  REDIS_HOST: "redis-service"
  REDIS_PORT: "6379"
  DJANGO_SETTINGS_MODULE: core.settings