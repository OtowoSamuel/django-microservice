---
# Postgres Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
        - name: postgres
          image: postgres:13-alpine
          ports:
            - containerPort: 5432
          envFrom:
            - secretRef:
                name: app-secrets
          volumeMounts:
            - mountPath: /var/lib/postgresql/data
              name: postgres-data
      volumes:
        - name: postgres-data
          persistentVolumeClaim:
            claimName: postgres-pvc
---
# Redis Service
apiVersion: v1
kind: Service
metadata:
  name: redis-service
  namespace: default
spec:
  selector:
    app: redis
  ports:
    - protocol: TCP
      port: 6379
      targetPort: 6379
  type: ClusterIP
---
# Redis Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
        - name: redis
          image: redis:6-alpine
          ports:
            - containerPort: 6379
---
# Web Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: web
  namespace: default
spec:
  replicas: 3
  selector:
    matchLabels:
      app: django-app
      component: web
  template:
    metadata:
      labels:
        app: django-app
        component: web
    spec:
      initContainers:
        - name: wait-for-postgres
          image: busybox
          command: ['sh', '-c', 'until nslookup db; do echo waiting for postgres; sleep 2; done;']
        - name: wait-for-redis
          image: busybox
          command: ['sh', '-c', 'until nslookup redis-service; do echo waiting for redis; sleep 2; done;']
      containers:
        - name: web
          image: ${ECR_REPO_URL}:latest
          imagePullPolicy: Always
          ports:
            - containerPort: 8000
          envFrom:
            - secretRef:
                name: app-secrets
            - configMapRef:
                name: app-config
          resources:
            limits:
              cpu: "500m"
              memory: "512Mi"
            requests:
              cpu: "100m"
              memory: "256Mi"
          livenessProbe:
            httpGet:
              path: /health/
              port: 8000
            initialDelaySeconds: 30
            timeoutSeconds: 1
            periodSeconds: 30
            successThreshold: 1
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /health/
              port: 8000
            initialDelaySeconds: 15
            timeoutSeconds: 1
            periodSeconds: 20
            successThreshold: 1
            failureThreshold: 3
---
# Worker Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: worker
  namespace: default
spec:
  replicas: 2
  selector:
    matchLabels:
      app: django-app
      component: worker
  template:
    metadata:
      labels:
        app: django-app
        component: worker
    spec:
      initContainers:
        - name: wait-for-postgres
          image: busybox
          command: ['sh', '-c', 'until nslookup db; do echo waiting for postgres; sleep 2; done;']
        - name: wait-for-redis
          image: busybox
          command: ['sh', '-c', 'until nslookup redis-service; do echo waiting for redis; sleep 2; done;']
      containers:
        - name: worker
          image: ${ECR_REPO_URL}:latest
          envFrom:
            - secretRef:
                name: app-secrets
            - configMapRef:
                name: app-config
          command: ["celery", "-A", "core", "worker", "--loglevel=info"]
---
# Django Migrate Job
apiVersion: batch/v1
kind: Job
metadata:
  name: django-migrate
  namespace: default
spec:
  template:
    spec:
      initContainers:
        - name: wait-for-postgres
          image: busybox
          command: ['sh', '-c', 'until nslookup db; do echo waiting for postgres; sleep 2; done;']
      containers:
        - name: migrate
          image: ${ECR_REPO_URL}:latest
          command: ["python", "manage.py", "migrate"]
          envFrom:
            - secretRef:
                name: app-secrets
            - configMapRef:
                name: app-config
      restartPolicy: OnFailure
---
# ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: app-config
  namespace: default
data:
  CELERY_BROKER_URL: redis://redis-service:6379/0
  CELERY_RESULT_BACKEND: redis://redis-service:6379/0
  DJANGO_SETTINGS_MODULE: core.settings