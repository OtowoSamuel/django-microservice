---
# PostgreSQL Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
      - name: postgres
        image: postgres:15
        env:
        - name: POSTGRES_PASSWORD
          value: "postgres"  # Consider using a Kubernetes secret instead
        - name: POSTGRES_USER
          value: "postgres"
        - name: POSTGRES_DB
          value: "django_db"
        - name: PGDATA
          value: "/var/lib/postgresql/data/pgdata"
        ports:
        - containerPort: 5432
        volumeMounts:
        - name: postgres-data
          mountPath: /var/lib/postgresql/data
      volumes:
      - name: postgres-data
        persistentVolumeClaim:
          claimName: postgres-pvc
---
# PostgreSQL Service
apiVersion: v1
kind: Service
metadata:
  name: db
  namespace: default
spec:
  selector:
    app: postgres
  ports:
  - port: 5432
    targetPort: 5432
  type: ClusterIP
---
# PostgreSQL PVC
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
  namespace: default
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 8Gi
  storageClassName: gp2
---
# Redis Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: redis:alpine
        ports:
        - containerPort: 6379
---
# Redis Service
apiVersion: v1
kind: Service
metadata:
  name: redis
  namespace: default
spec:
  selector:
    app: redis
  ports:
  - port: 6379
    targetPort: 6379
  type: ClusterIP
---
# Web Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: web
  namespace: default
spec:
  replicas: 3
  selector:
    matchLabels:
      app: web
  template:
    metadata:
      labels:
        app: web
    spec:
      containers:
      - name: web
        image: ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/django-microservice:latest
        env:
        - name: DB_NAME
          value: "django_db"
        - name: DB_USER
          value: "postgres"
        - name: DB_PASSWORD
          value: "postgres"
        - name: DB_HOST
          value: "db"
        - name: DB_PORT
          value: "5432"
        - name: SECRET_KEY
          value: "django-insecure-key-for-development"
        - name: DEBUG
          value: "true"
        ports:
        - containerPort: 8000
      imagePullSecrets:
      - name: ecr-secret
---
# Web Service
apiVersion: v1
kind: Service
metadata:
  name: web
  namespace: default
spec:
  selector:
    app: web
  ports:
  - port: 80
    targetPort: 8000
  type: LoadBalancer
---
# Celery Worker Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: worker
  namespace: default
spec:
  replicas: 2
  selector:
    matchLabels:
      app: worker
  template:
    metadata:
      labels:
        app: worker
    spec:
      containers:
      - name: worker
        image: ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/django-microservice:latest
        env:
        - name: DB_NAME
          value: "django_db"
        - name: DB_USER
          value: "postgres"
        - name: DB_PASSWORD
          value: "postgres"
        - name: DB_HOST
          value: "db"
        - name: DB_PORT
          value: "5432"
        - name: SECRET_KEY
          value: "django-insecure-key-for-development"
        - name: DEBUG
          value: "true"
        command: ["celery"]
        args: ["-A", "core", "worker", "--loglevel=info"]
      imagePullSecrets:
      - name: ecr-secret
---
# Django Migrate Job
apiVersion: batch/v1
kind: Job
metadata:
  name: django-migrate
  namespace: default
spec:
  template:
    spec:
      initContainers:
        - name: wait-for-postgres
          image: busybox
          command: ['sh', '-c', 'until nslookup db; do echo waiting for postgres; sleep 2; done;']
      containers:
        - name: migrate
          image: ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/django-microservice:latest
          command: ["python", "manage.py", "migrate"]
          env:
          - name: DB_NAME
            value: "django_db"
          - name: DB_USER
            value: "postgres"
          - name: DB_PASSWORD
            value: "postgres"
          - name: DB_HOST
            value: "db"
          - name: DB_PORT
            value: "5432"
          - name: SECRET_KEY
            value: "django-insecure-key-for-development"
          - name: DEBUG
            value: "true"
      restartPolicy: OnFailure
---
# ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: app-config
  namespace: default
data:
  CELERY_BROKER_URL: redis://redis:6379/0
  CELERY_RESULT_BACKEND: redis://redis:6379/0
  DJANGO_SETTINGS_MODULE: core.settings
  
